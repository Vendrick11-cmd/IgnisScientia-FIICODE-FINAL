[gd_scene load_steps=13 format=2]

[ext_resource path="res://Shaders/Light1.png" type="Texture" id=1]
[ext_resource path="res://Shaders/Light.tscn" type="PackedScene" id=2]
[ext_resource path="res://Misc/LevelTransition.gd" type="Script" id=3]
[ext_resource path="res://Misc/Black.jpg" type="Texture" id=4]

[sub_resource type="Shader" id=1]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.4;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.2;

uniform float speed = 2.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/angle = -0.316
shader_param/position = -0.399
shader_param/spread = 0.808
shader_param/cutoff = 0.327
shader_param/falloff = 1.0
shader_param/edge_fade = 0.266
shader_param/speed = 2.0
shader_param/ray1_density = 13.0
shader_param/ray2_density = 47.0
shader_param/ray2_intensity = 0.33
shader_param/color = Color( 0.145098, 0.913725, 0.823529, 1 )
shader_param/hdr = true
shader_param/seed = 5.0

[sub_resource type="CanvasItemMaterial" id=3]
blend_mode = 1

[sub_resource type="CanvasItemMaterial" id=4]
blend_mode = 1

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 2.10224, 72.7375 )

[sub_resource type="Animation" id=6]
resource_name = "Quit"
length = 1.2
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.4, 0.8, 1.2 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 0 ), Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=7]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=8]
resource_name = "Start"
length = 3.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 3.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[node name="LevelTransition" type="Area2D"]
script = ExtResource( 3 )
__meta__ = {
"_edit_horizontal_guides_": [ -20.4822 ]
}

[node name="Ray10" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 134.453, 96.9409 )
rotation = 1.5708
scale = Vector2( 1.70702, -1.70702 )
texture = ExtResource( 1 )

[node name="Light2D2" type="Sprite" parent="Ray10"]
modulate = Color( 0.615686, 0.937255, 0.952941, 0.305882 )
material = SubResource( 3 )
position = Vector2( -68.7881, -71.9904 )
rotation = 1.5708
scale = Vector2( 1.3, -1.3 )
texture = ExtResource( 1 )

[node name="Light2D" parent="Ray10" instance=ExtResource( 2 )]
modulate = Color( 1, 0.529412, 0.188235, 1 )
material = SubResource( 4 )
position = Vector2( -68.7881, -71.9904 )
texture_scale = 6.0
color = Color( 0.203922, 0.870588, 0.980392, 1 )
energy = 0.7
shadow_filter = 5

[node name="TransportRay" type="RayCast2D" parent="."]
position = Vector2( 13.3321, -53.8672 )
enabled = true
cast_to = Vector2( 0, 150 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 13.3321, 20.2205 )
shape = SubResource( 5 )
disabled = true

[node name="Timer" type="Timer" parent="."]
wait_time = 0.4
one_shot = true

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = 4

[node name="Black" type="Sprite" parent="CanvasLayer"]
modulate = Color( 0, 0, 0, 0 )
position = Vector2( 972, 544 )
scale = Vector2( 6.48, 6.47619 )
texture = ExtResource( 4 )

[node name="StartAnim" type="AnimationPlayer" parent="CanvasLayer/Black"]
reset_on_save = false
anims/Quit = SubResource( 6 )
anims/RESET = SubResource( 7 )
anims/Start = SubResource( 8 )

[connection signal="body_entered" from="." to="." method="_on_LevelTransition_body_entered"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
