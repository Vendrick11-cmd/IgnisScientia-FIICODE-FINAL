[gd_scene load_steps=13 format=2]

[ext_resource path="res://Misc/Overlap/InteractRay.tscn" type="PackedScene" id=3]
[ext_resource path="res://Shaders/Light1.png" type="Texture" id=4]

[sub_resource type="GDScript" id=69]
script/source = "extends StaticBody2D




# Called when the node enters the scene tree for the first time.
func _ready():
	pass

func _physics_process(_delta):
	if $InteractRay.is_colliding() and Input.is_action_just_pressed(\"Interact\"):
		$InteractRay.enabled = false
		$PickUpArea/CollisionShape2D.disabled = true
		$AnimationPlayer.play(\"Open\")











"

[sub_resource type="StreamTexture" id=70]
load_path = "res://.import/2ndTierChest.png-ffecbbe4825c91ff56141e15dc4cb2f0.stex"

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 23.3861, 12.618 )

[sub_resource type="Animation" id=1]
resource_name = "Idle"
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("PickUpArea:collision_layer")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 1024 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("PickUpArea/CollisionShape2D:disabled")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ false ]
}

[sub_resource type="Animation" id=2]
resource_name = "Open"
length = 3.0
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.1, 0.2, 0.3, 0.4 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 1,
"values": [ 0, 1, 2, 3, 4 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("PickUpArea:collision_layer")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("PickUpArea/CollisionShape2D:disabled")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ true ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("Ray:modulate")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0, 0.2, 0.3, 0.4, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.211765 ), Color( 1, 1, 1, 0.439216 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("Ray/Light2D:energy")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.4, 3 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0, 0.0 ]
}

[sub_resource type="Animation" id=3]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("Sprite:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("PickUpArea:collision_layer")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1024 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("PickUpArea/CollisionShape2D:disabled")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ false ]
}

[sub_resource type="RectangleShape2D" id=8]
extents = Vector2( 9.77712, 6.04625 )

[sub_resource type="Shader" id=6]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/god-rays

Feel free to use, improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.4;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.2;

uniform float speed = 2.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : hint_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 6 )
shader_param/angle = 0.105
shader_param/position = 0.274
shader_param/spread = 0.808
shader_param/cutoff = 0.327
shader_param/falloff = 1.0
shader_param/edge_fade = 0.333
shader_param/speed = 2.0
shader_param/ray1_density = 13.0
shader_param/ray2_density = 47.0
shader_param/ray2_intensity = 1.0
shader_param/color = Color( 0.984314, 0.592157, 0.333333, 1 )
shader_param/hdr = true
shader_param/seed = 5.0

[sub_resource type="CanvasItemMaterial" id=68]
blend_mode = 1

[node name="ItemChest" type="StaticBody2D"]
collision_layer = 0
collision_mask = 0
script = SubResource( 69 )

[node name="Sprite" type="Sprite" parent="."]
scale = Vector2( 0.7, 0.7 )
texture = SubResource( 70 )
hframes = 5

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
visible = false
position = Vector2( 0.395554, 2.61797 )
shape = SubResource( 4 )
disabled = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
reset_on_save = false
anims/Idle = SubResource( 1 )
anims/Open = SubResource( 2 )
anims/RESET = SubResource( 3 )

[node name="PickUpArea" type="Area2D" parent="."]
position = Vector2( -12.5694, -12.5859 )
collision_layer = 1024
collision_mask = 0

[node name="CollisionShape2D" type="CollisionShape2D" parent="PickUpArea"]
position = Vector2( 12.284, 17.8521 )
shape = SubResource( 8 )

[node name="InteractRay" parent="." instance=ExtResource( 3 )]
position = Vector2( 9.29547, 1.61088 )
cast_to = Vector2( 0, 20 )

[node name="Ray" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0 )
material = SubResource( 7 )
position = Vector2( -26.6898, -65.8483 )
rotation = 0.00982639
scale = Vector2( 0.637231, -0.818615 )
texture = ExtResource( 4 )

[node name="Light2D2" type="Sprite" parent="Ray"]
visible = false
modulate = Color( 0.952941, 0.780392, 0.615686, 0.239216 )
material = SubResource( 68 )
position = Vector2( 42.0683, -78.299 )
rotation = 1.5708
scale = Vector2( 1.3, -1.3 )
texture = ExtResource( 4 )

[node name="Light2D" type="Light2D" parent="Ray"]
position = Vector2( 39.8556, -80.4629 )
texture = ExtResource( 4 )
color = Color( 0.976471, 0.647059, 0.431373, 1 )
energy = 0.0
